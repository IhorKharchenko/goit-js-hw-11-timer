{"version":3,"sources":["webpack:///./js/refs.js","webpack:///./index.js"],"names":["inputRef","document","querySelector","btnStart","btnStop","days","hours","mins","secs","refs","MyTimer","targetDate","this","Date","active","localStorage","time","start","timer","countId","setInterval","currentTime","now","deltaTime","updateClockFace","daysFace","pad","Math","floor","hoursFace","minsFace","secsFace","textContent","value","String","padStart","inputValue","addEventListener","debounce","event","target","alert","length","setItem","console","log","removeItem","clearInterval"],"mappings":"uIAAe,GACbA,SAAUC,SAASC,cAAc,UACjCC,SAAUF,SAASC,cAAc,aACjCE,QAASH,SAASC,cAAc,YAChCG,KAAMJ,SAASC,cAAc,uBAC7BI,MAAOL,SAASC,cAAc,wBAC9BK,KAAMN,SAASC,cAAc,uBAC7BM,KAAMP,SAASC,cAAc,wB,iCCHvBG,EAAyDI,EAAzDJ,KAAMC,EAAmDG,EAAnDH,MAAOC,EAA4CE,EAA5CF,KAAMC,EAAsCC,EAAtCD,KAAML,EAAgCM,EAAhCN,SAAUC,EAAsBK,EAAtBL,QAASJ,EAAaS,EAAbT,SAyC9CU,EAAU,I,WAtCd,WAAYC,GACVC,KAAKD,WAAa,IAAIE,KAAKF,GAC3BC,KAAKE,QAAS,EACVC,aAAaC,OACfJ,KAAKD,WAAa,IAAIE,KAAKE,aAAaC,MACxCJ,KAAKK,S,2BAITA,MAAA,WAAQ,WACNL,KAAKM,QACLN,KAAKE,QAAS,EACdF,KAAKO,QAAUC,aAAY,WACzB,EAAKF,UACJ,M,EAELA,MAAA,WACE,IAAMG,EAAcR,KAAKS,MACnBC,EAAYX,KAAKD,WAAaU,EACpCT,KAAKY,gBAAgBD,I,EAEvBC,gBAAA,SAAgBR,GACd,IAAMS,EAAWb,KAAKc,IAAIC,KAAKC,MAAMZ,EAAO,QACtCa,EAAYjB,KAAKc,IAAIC,KAAKC,MAAOZ,EAAO,MAAR,OAChCc,EAAWlB,KAAKc,IAAIC,KAAKC,MAAOZ,EAAO,KAAR,MAC/Be,EAAWnB,KAAKc,IAAIC,KAAKC,MAAOZ,EAAO,IAAe,MAE5DX,EAAK2B,YAAcP,EACnBnB,EAAM0B,YAAcH,EACpBtB,EAAKyB,YAAcF,EACnBtB,EAAKwB,YAAcD,G,EAGrBL,IAAA,SAAIO,GACF,OAAOC,OAAOD,GAAOE,SAAS,EAAG,M,MAKjCC,EAAa,GAEjBpC,EAASqC,iBACP,QACAC,KAAS,SAACC,GACRH,EAAaG,EAAMC,OAAOP,QACzB,MAEL9B,EAASkC,iBAAiB,SAa1B,WACE,GAAI3B,EAAQI,OAAQ,OAAO2B,MAAM,6BACjC,GAA0B,KAAtBL,EAAWM,QAAgC,OAAfN,EAAqB,OAAOK,MAAM,qBAElE/B,EAAQC,WAAa,IAAIE,KAAKuB,GAC9BrB,aAAa4B,QAAQ,OAAQP,GAC7B1B,EAAQO,QACR2B,QAAQC,IAAInC,MAlBdN,EAAQiC,iBAAiB,SAEzB,WACEtB,aAAa+B,WAAW,QACxBpC,EAAQI,QAAS,EACjBd,EAASiC,MAAQ,GACjBG,EAAa,GACb1B,EAAQc,gBAAgB,GACxBuB,cAAcrC,EAAQS,c","file":"main.368aec4c163e87f1f676.js","sourcesContent":["export default {\n  inputRef: document.querySelector(\".input\"),\n  btnStart: document.querySelector(\".start-js\"),\n  btnStop: document.querySelector(\".stop-js\"),\n  days: document.querySelector('[data-value=\"days\"]'),\n  hours: document.querySelector('[data-value=\"hours\"]'),\n  mins: document.querySelector('[data-value=\"mins\"]'),\n  secs: document.querySelector('[data-value=\"secs\"]'),\n};\n","import refs from \"./js/refs.js\";\nimport css from \"./css/styles.css\";\nimport debounce from \"lodash.debounce\";\n\nconst { days, hours, mins, secs, btnStart, btnStop, inputRef } = refs;\n\nclass Countdown {\n  constructor(targetDate) {\n    this.targetDate = new Date(targetDate);\n    this.active = false;\n    if (localStorage.time) {\n      this.targetDate = new Date(localStorage.time);\n      this.start();\n    }\n  }\n\n  start() {\n    this.timer();\n    this.active = true;\n    this.countId = setInterval(() => {\n      this.timer();\n    }, 1000);\n  }\n  timer() {\n    const currentTime = Date.now();\n    const deltaTime = this.targetDate - currentTime;\n    this.updateClockFace(deltaTime);\n  }\n  updateClockFace(time) {\n    const daysFace = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hoursFace = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const minsFace = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secsFace = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    days.textContent = daysFace;\n    hours.textContent = hoursFace;\n    mins.textContent = minsFace;\n    secs.textContent = secsFace;\n  }\n\n  pad(value) {\n    return String(value).padStart(2, \"0\");\n  }\n}\n\nconst MyTimer = new Countdown();\nlet inputValue = \"\";\n\ninputRef.addEventListener(\n  \"input\",\n  debounce((event) => {\n    inputValue = event.target.value;\n  }, 1000),\n);\nbtnStart.addEventListener(\"click\", startCount);\n\nbtnStop.addEventListener(\"click\", stopCount);\n\nfunction stopCount() {\n  localStorage.removeItem(\"time\");\n  MyTimer.active = false;\n  inputRef.value = \"\";\n  inputValue = \"\";\n  MyTimer.updateClockFace(0);\n  clearInterval(MyTimer.countId);\n}\n\nfunction startCount() {\n  if (MyTimer.active) return alert(\"Timer is running already!\");\n  if (inputValue.length !== 11 || inputValue === null) return alert(\"wrong date format\");\n\n  MyTimer.targetDate = new Date(inputValue);\n  localStorage.setItem(\"time\", inputValue);\n  MyTimer.start();\n  console.log(MyTimer);\n}\n"],"sourceRoot":""}